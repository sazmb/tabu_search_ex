package pack;

import java.lang.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;


public class Main {
    static int  numIterations = 10;
    static int numTables = 6;
    public static void main(String[] args) {
        int best_global_value = 0;
        int best_global_index = 0; //index of the iteration that find the the best global solution
        List<Job> best_global_solution = new ArrayList<Job>();
        TabuSearch tabuSearch = new TabuSearch();
        SolutionData solutionData = new SolutionData(numIterations, numTables);

        tabuSearch.create_istance();

        //the initial solution is generated by adding the jobs in increasing order of their due date
        best_global_solution = tabuSearch.findInitialSolution();
        best_global_value = tabuSearch.calculateValue(best_global_solution);
        solutionData.save_data(0, best_global_solution);
        List<Job> current_solution = tabuSearch.makeMove(best_global_solution);

        for (int i = 0; i < numIterations; i++) {
            current_solution = tabuSearch.makeMove(current_solution);
            solutionData.save_data(i+1, current_solution);
            if (tabuSearch.calculateValue(current_solution) <= best_global_value) {
                best_global_solution = current_solution;
                best_global_value = tabuSearch.calculateValue(current_solution);
                best_global_index = i+1;
            }
        }

        System.out.println("Best global solution value: " + best_global_value);
        System.out.printf("Best global solution : [");
        for(Job job: best_global_solution){
            System.out.printf(" "+job.number);
        }
        System.out.printf("]");

        final int index=best_global_index;
        SwingUtilities.invokeLater(() -> TabellineGUI.createAndShowGUI(solutionData, index));
    }


    public class TabellineGUI {


        private static void createAndShowGUI(SolutionData data, int best_sol_index) {
            JFrame frame = new JFrame(" Iterations");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(1000, 400);

            JPanel mainPanel = new JPanel();
            mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));



            for (int iter = 0; iter < numIterations+1; iter++) {
                // Pannello per ogni iterazione
                JPanel iterationPanel = new JPanel();
                iterationPanel.setLayout(new BorderLayout());

                // Intestazione Iterazione
                JLabel iterationLabel = new JLabel("Iteration " + iter, SwingConstants.CENTER);
                iterationLabel.setFont(new Font("Arial", Font.BOLD, 16));
                iterationPanel.add(iterationLabel, BorderLayout.NORTH);

                // Pannello contenente le tabelle
                JPanel tablesPanel = new JPanel();
                tablesPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));

                // Etichetta iniziale
                tablesPanel.add(createLabelPanel("Temp_tot=0" ,
                        "Cost=0",
                        "Total_cost=0"));

                for (int i = 0; i < numTables; i++) {
                    // Creazione tabella
                    String[] columnNames = {"N= "+data.arrayListArray[iter].get(i).number };
                    Object[][] data_tab = {
                            {"W=" + data.arrayListArray[iter].get(i).weight},
                            {"PT=" + data.arrayListArray[iter].get(i).processingTime},
                            {"DD=" + data.arrayListArray[iter].get(i).dueDate},

                    };

                    JTable table = new JTable(new DefaultTableModel(data_tab, columnNames));
                    table.setPreferredScrollableViewportSize(new Dimension(80, 60));
                    table.setFillsViewportHeight(true);

                    // Contenitore tabella con bordo
                    JPanel tablePanel = new JPanel();
                    tablePanel.setLayout(new BorderLayout());
                    tablePanel.add(new JScrollPane(table), BorderLayout.CENTER);
                    tablePanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));

                    tablesPanel.add(tablePanel);

                    // Aggiunta separatori tra le tabelle (con "Temp_tot, Cost, Total_cost")
                    if (i < numTables) {
                        tablesPanel.add(createLabelPanel("Temp_tot=" + data.temp_tot[iter][i],
                                "Cost="+ data.costs[iter][i],
                                "Total_cost="+ data.total_cost[iter][i]));
                    }
                }

                // Etichetta finale dopo l'ultima tabella

                iterationPanel.add(tablesPanel, BorderLayout.CENTER);
                mainPanel.add(iterationPanel);
            }

                // Pannello per ogni iterazione
                JPanel iterationPanel = new JPanel();
                iterationPanel.setLayout(new BorderLayout());

                // Intestazione Iterazione
                JLabel iterationLabel = new JLabel("Best Solution: " + data.total_cost[best_sol_index][numTables-1], SwingConstants.CENTER);
                iterationLabel.setFont(new Font("Arial", Font.BOLD, 16));
                iterationPanel.add(iterationLabel, BorderLayout.NORTH);

                // Pannello contenente le tabelle
                JPanel tablesPanel = new JPanel();
                tablesPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));

                // Etichetta iniziale
                tablesPanel.add(createLabelPanel("Temp_tot=0" ,
                        "Cost=0",
                        "Total_cost=0"));

                for (int i = 0; i < numTables; i++) {
                    // Creazione tabella
                    String[] columnNames = {"N= " + data.arrayListArray[best_sol_index].get(i).number};
                    Object[][] data_tab = {
                            {"W=" + data.arrayListArray[best_sol_index].get(i).weight},
                            {"PT=" + data.arrayListArray[best_sol_index].get(i).processingTime},
                            {"DD=" + data.arrayListArray[best_sol_index].get(i).dueDate},

                    };

                    JTable table = new JTable(new DefaultTableModel(data_tab, columnNames));
                    table.setPreferredScrollableViewportSize(new Dimension(80, 60));
                    table.setFillsViewportHeight(true);

                    // Contenitore tabella con bordo
                    JPanel tablePanel = new JPanel();
                    tablePanel.setLayout(new BorderLayout());
                    tablePanel.add(new JScrollPane(table), BorderLayout.CENTER);
                    tablePanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));

                    tablesPanel.add(tablePanel);

                    // Aggiunta separatori tra le tabelle (con "Temp_tot, Cost, Total_cost")
                    if (i < numTables) {
                        tablesPanel.add(createLabelPanel("Temp_tot=" + data.temp_tot[best_sol_index][i],
                                "Cost="+ data.costs[best_sol_index][i],
                                "Total_cost="+ data.total_cost[best_sol_index][i]));
                    }
                }

                // Etichetta finale dopo l'ultima tabella

                iterationPanel.add(tablesPanel, BorderLayout.CENTER);
                mainPanel.add(iterationPanel);

            frame.add(new JScrollPane(mainPanel));
            frame.setVisible(true);
        }

        // Metodo per creare un pannello con i tre valori (Temp_tot, Cost, Total_cost)
        private static JPanel createLabelPanel(String tempTot, String cost, String totalCost) {
            JPanel labelPanel = new JPanel();
            labelPanel.setLayout(new GridLayout(3, 1));
            labelPanel.add(new JLabel(tempTot, SwingConstants.CENTER));
            labelPanel.add(new JLabel(cost, SwingConstants.CENTER));
            labelPanel.add(new JLabel(totalCost, SwingConstants.CENTER));
            return labelPanel;
        }
    }
}